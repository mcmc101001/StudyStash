// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                          String                       @id @default(cuid())
  name                        String?
  email                       String?                      @unique
  emailVerified               DateTime?
  image                       String?
  bio                         String                       @default("") @db.TinyText
  verified                    Boolean                      @default(false)
  visitedData                 String                       @default("{\"visitedCheatsheets\":[],\"visitedPastPapers\":[],\"visitedNotes\":[],\"visitedSolutions\":[]}") @db.Text
  accounts                    Account[]
  sessions                    Session[]
  cheatsheets                 Cheatsheet[]
  questionPapers              QuestionPaper[]
  notes                       Notes[]
  solutions                   Solution[]
  cheatsheetVotes             CheatsheetVote[]
  questionPaperVotes          QuestionPaperVote[]
  notesVotes                  NotesVote[]
  solutionVotes               SolutionVote[]
  questionPaperDifficulty     QuestionPaperDifficulty[]
  starredModules              StarredModules[]
  cheatsheetStatuses          CheatsheetStatus[]
  questionPaperStatuses       QuestionPaperStatus[]
  notesStatuses               NotesStatus[]
  solutionStatuses            SolutionStatus[]
  cheatsheetReports           CheatsheetReport[]
  questionPaperReports        QuestionPaperReport[]
  notesReports                NotesReport[]
  solutionReports             SolutionReport[]
  cheatsheetComments          CheatsheetComment[]
  questionPaperComments       QuestionPaperComment[]
  notesComments               NotesComment[]
  solutionComments            SolutionComment[]
  cheatsheetReplies           CheatsheetReply[]
  questionPaperReplies        QuestionPaperReply[]
  notesReplies                NotesReply[]
  solutionReplies             SolutionReply[]
  cheatsheetCommentVotes      CheatsheetCommentVote[]
  questionPaperCommentVotes   QuestionPaperCommentVote[]
  notesCommentVotes           NotesCommentVote[]
  solutionCommentVotes        SolutionCommentVote[]
  cheatsheetReplyVotes        CheatsheetReplyVote[]
  questionPaperReplyVotes     QuestionPaperReplyVote[]
  notesReplyVotes             NotesReplyVote[]
  solutionReplyVotes          SolutionReplyVote[]
  CheatsheetCommentReports    CheatsheetCommentReport[]
  QuestionPaperCommentReports QuestionPaperCommentReport[]
  NotesCommentReports         NotesCommentReport[]
  SolutionCommentReports      SolutionCommentReport[]
  CheatsheetReplyReports      CheatsheetReplyReport[]
  QuestionPaperReplyReports   QuestionPaperReplyReport[]
  NotesReplyReports           NotesReplyReport[]
  SolutionReplyReports        SolutionReplyReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cheatsheet {
  id            String              @id @default(cuid())
  name          String              @db.TinyText
  createdAt     DateTime            @default(now())
  userSubmitted User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  moduleCode    String
  acadYear      String
  semester      SemesterType
  type          ExamType
  votes         CheatsheetVote[]
  statuses      CheatsheetStatus[]
  reports       CheatsheetReport[]
  comments      CheatsheetComment[]

  @@index([userId])
}

model QuestionPaper {
  id               String                    @id @default(cuid())
  name             String                    @db.TinyText
  createdAt        DateTime                  @default(now())
  userSubmitted    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  moduleCode       String
  acadYear         String
  semester         SemesterType
  solutionIncluded Boolean                   @default(false)
  type             ExamType
  votes            QuestionPaperVote[]
  difficulties     QuestionPaperDifficulty[]
  statuses         QuestionPaperStatus[]
  reports          QuestionPaperReport[]
  solutions        Solution[]
  comments         QuestionPaperComment[]

  @@index([userId])
}

model Notes {
  id            String         @id @default(cuid())
  name          String         @db.TinyText
  createdAt     DateTime       @default(now())
  userSubmitted User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  moduleCode    String
  acadYear      String
  semester      SemesterType
  votes         NotesVote[]
  statuses      NotesStatus[]
  reports       NotesReport[]
  comments      NotesComment[]

  @@index([userId])
}

model Solution {
  id              String            @id @default(cuid())
  name            String            @db.TinyText
  createdAt       DateTime          @default(now())
  userSubmitted   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  questionPaper   QuestionPaper     @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)
  questionPaperId String
  votes           SolutionVote[]
  statuses        SolutionStatus[]
  reports         SolutionReport[]
  comments        SolutionComment[]

  @@index([userId])
  @@index([questionPaperId])
}

model CheatsheetVote {
  value      Boolean /// true = upvote, false = downvote
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Cheatsheet @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperVote {
  value      Boolean /// true = upvote, false = downvote
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model NotesVote {
  value      Boolean /// true = upvote, false = downvote
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Notes   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model SolutionVote {
  value      Boolean /// true = upvote, false = downvote
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Solution @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model CheatsheetStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Cheatsheet     @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model NotesStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Notes          @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model SolutionStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Solution       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperDifficulty {
  value      Int
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model StarredModules {
  moduleCode String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleCode])
}

model CheatsheetReport {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       ResourceReportType
  resource   Cheatsheet         @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperReport {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       ResourceReportType
  resource   QuestionPaper      @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model NotesReport {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       ResourceReportType
  resource   Notes              @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model SolutionReport {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       SolutionReportType
  resource   Solution           @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model CheatsheetComment {
  id         String                    @id @default(cuid())
  createdAt  DateTime                  @default(now())
  isEdited   Boolean                   @default(false)
  isDeleted  Boolean                   @default(false)
  editedAt   DateTime?                 @updatedAt
  user       User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Cheatsheet                @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String                    @db.Text
  replies    CheatsheetReply[]
  votes      CheatsheetCommentVote[]
  reports    CheatsheetCommentReport[]

  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperComment {
  id         String                       @id @default(cuid())
  createdAt  DateTime                     @default(now())
  isEdited   Boolean                      @default(false)
  isDeleted  Boolean                      @default(false)
  editedAt   DateTime?                    @updatedAt
  user       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper                @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String                       @db.Text
  replies    QuestionPaperReply[]
  votes      QuestionPaperCommentVote[]
  reports    QuestionPaperCommentReport[]

  @@index([userId])
  @@index([resourceId])
}

model NotesComment {
  id         String               @id @default(cuid())
  createdAt  DateTime             @default(now())
  isEdited   Boolean              @default(false)
  isDeleted  Boolean              @default(false)
  editedAt   DateTime?            @updatedAt
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Notes                @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String               @db.Text
  replies    NotesReply[]
  votes      NotesCommentVote[]
  reports    NotesCommentReport[]

  @@index([userId])
  @@index([resourceId])
}

model SolutionComment {
  id         String                  @id @default(cuid())
  createdAt  DateTime                @default(now())
  isEdited   Boolean                 @default(false)
  isDeleted  Boolean                 @default(false)
  editedAt   DateTime?               @updatedAt
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Solution                @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String                  @db.Text
  replies    SolutionReply[]
  votes      SolutionCommentVote[]
  reports    SolutionCommentReport[]

  @@index([userId])
  @@index([resourceId])
}

model CheatsheetReply {
  id        String                  @id @default(cuid())
  createdAt DateTime                @default(now())
  isEdited  Boolean                 @default(false)
  isDeleted Boolean                 @default(false)
  editedAt  DateTime?               @updatedAt
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   CheatsheetComment       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String                  @db.Text
  votes     CheatsheetReplyVote[]
  reports   CheatsheetReplyReport[]

  @@index([userId])
  @@index([commentId])
}

model QuestionPaperReply {
  id        String                     @id @default(cuid())
  createdAt DateTime                   @default(now())
  isEdited  Boolean                    @default(false)
  isDeleted Boolean                    @default(false)
  editedAt  DateTime?                  @updatedAt
  user      User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   QuestionPaperComment       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String                     @db.Text
  votes     QuestionPaperReplyVote[]
  reports   QuestionPaperReplyReport[]

  @@index([userId])
  @@index([commentId])
}

model NotesReply {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  isEdited  Boolean            @default(false)
  isDeleted Boolean            @default(false)
  editedAt  DateTime?          @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   NotesComment       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String             @db.Text
  votes     NotesReplyVote[]
  reports   NotesReplyReport[]

  @@index([userId])
  @@index([commentId])
}

model SolutionReply {
  id        String                @id @default(cuid())
  createdAt DateTime              @default(now())
  isEdited  Boolean               @default(false)
  isDeleted Boolean               @default(false)
  editedAt  DateTime?             @updatedAt
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   SolutionComment       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String                @db.Text
  votes     SolutionReplyVote[]
  reports   SolutionReplyReport[]

  @@index([userId])
  @@index([commentId])
}

model CheatsheetCommentVote {
  value     Boolean /// true = upvote, false = downvote
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   CheatsheetComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model QuestionPaperCommentVote {
  value     Boolean /// true = upvote, false = downvote
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   QuestionPaperComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model NotesCommentVote {
  value     Boolean /// true = upvote, false = downvote
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   NotesComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model SolutionCommentVote {
  value     Boolean /// true = upvote, false = downvote
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   SolutionComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model CheatsheetReplyVote {
  value   Boolean /// true = upvote, false = downvote
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  reply   CheatsheetReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  @@unique([userId, replyId])
  @@index([userId])
  @@index([replyId])
}

model QuestionPaperReplyVote {
  value   Boolean /// true = upvote, false = downvote
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  reply   QuestionPaperReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  @@unique([userId, replyId])
  @@index([userId])
  @@index([replyId])
}

model NotesReplyVote {
  value   Boolean /// true = upvote, false = downvote
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  reply   NotesReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  @@unique([userId, replyId])
  @@index([userId])
  @@index([replyId])
}

model SolutionReplyVote {
  value   Boolean /// true = upvote, false = downvote
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  reply   SolutionReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  @@unique([userId, replyId])
  @@index([userId])
  @@index([replyId])
}

model CheatsheetCommentReport {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   CheatsheetComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model QuestionPaperCommentReport {
  id        String               @id @default(cuid())
  createdAt DateTime             @default(now())
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   QuestionPaperComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model NotesCommentReport {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   NotesComment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model SolutionCommentReport {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   SolutionComment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model CheatsheetReplyReport {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   CheatsheetReply   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model QuestionPaperReplyReport {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   QuestionPaperReply @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model NotesReplyReport {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   NotesReply        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

model SolutionReplyReport {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      CommentReportType
  comment   SolutionReply     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([userId])
  @@index([commentId])
}

/// WARNING: CHANGE CONTENT.TS IF CHANGING THIS
enum SemesterType {
  semester1
  semester2
  specialTerm1
  specialTerm2
}

enum ExamType {
  Midterm
  Final
  Quiz
  Assignment
  PE
  Other
}

enum ResourceStatus {
  Completed
  Todo
  Saved
}

enum ResourceReportType {
  inappropriateFilename
  inappropriateUsername
  incorrectModule
  incorrectAcadYear
  incorrectSemester
  incorrectExamType
}

enum SolutionReportType {
  inappropriateFilename
  inappropriateUsername
  incorrectQuestionPaper
}

enum CommentReportType {
  inappropriateUsername
  spam
  harassment
}
